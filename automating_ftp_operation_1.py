# -*- coding: utf-8 -*-
"""Automating_FTP_Operation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18qZ5HdXoiUmzmbYVtvH_XFzCSSRsHQe6
"""

import wexpect  # Use wexpect instead of pexpect for Windows compatibility

def automate_ftp(server, username, password, local_file, remote_path, action):
    """
    Automates FTP operations using wexpect (Windows-compatible Pexpect).

    Parameters:
    - server (str): FTP server address
    - username (str): FTP username
    - password (str): FTP password
    - local_file (str): Local file path for upload/download
    - remote_path (str): Remote directory on the FTP server
    - action (str): Action to perform ('upload' or 'download')
    """
    try:
        # Start the FTP session
        print(f"Connecting to FTP server: {server}")
        child = wexpect.spawn(f'ftp {server}', timeout=30)

        # Wait for the username prompt and send the username
        child.expect('Name .*: ')
        child.sendline(username)

        # Wait for the password prompt and send the password
        child.expect('Password:')
        child.sendline(password)

        # Check for successful login
        index = child.expect(['ftp>', 'Login incorrect'])
        if index == 1:
            print("Login failed. Please check your credentials.")
            return

        print("Login successful.")

        # Change the remote directory
        print(f"Changing to remote directory: {remote_path}")
        child.sendline(f'cd {remote_path}')
        child.expect('ftp>')

        if action == "upload":
            # Upload the file
            print(f"Uploading file: {local_file}")
            child.sendline(f'put {local_file}')
            child.expect('ftp>')
            print(f"File uploaded successfully: {local_file}")

        elif action == "download":
            # Download the file
            print(f"Downloading file: {local_file}")
            child.sendline(f'get {local_file}')
            child.expect('ftp>')
            print(f"File downloaded successfully: {local_file}")

        else:
            print("Invalid action. Use 'upload' or 'download'.")

        # Exit the FTP session
        print("Closing FTP session.")
        child.sendline('bye')
        child.expect(wexpect.EOF)

        print("FTP operation completed successfully.")

    except wexpect.exceptions.TIMEOUT as e:
        print("Error: Operation timed out.")
    except Exception as e:
        print(f"Error: {e}")


# Example Configuration
ftp_server = "192.168.1.194"           # Example public FTP server
ftp_username = "admin"                  # Public FTP demo username
ftp_password = "yankeeD00dle"              # Public FTP demo password
local_file = "/content/host_info.py" # Local file path for upload
remote_directory = "/example"      # Example remote directory path
ftp_action = "upload"            # Action: 'upload' or 'download'

# Run the function
automate_ftp(ftp_server, ftp_username, ftp_password, local_file, remote_directory, ftp_action)